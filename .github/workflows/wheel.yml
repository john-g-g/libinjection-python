# Workflow to build and test wheels
name: Wheel builder

on:
  push:
    tags: 
      - 'v*.*.*' # when tag with name 'vX.Y.Z' is pushed to master
  release: # or when a new Release is created&published in GH web interface
    types: [published]
  # Manual run
  workflow_dispatch:

jobs:
  # Build the wheels for Linux, Windows and macOS for Python 3.8 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Window 64 bit
          # Note: windows-2019 is needed for older Python versions:
          # https://github.com/scikit-learn/scikit-learn/issues/22530
          - os: windows-2019
            python: 38
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            python: 39
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            python: 310
            bitness: 64
            platform_id: win_amd64

          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 39
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 310
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # Linux 64 bit musllinux 2014
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: musllinux_x86_64
            manylinux_image: musllinux_1_1
          - os: ubuntu-latest
            python: 39
            bitness: 64
            platform_id: musllinux_x86_64
            manylinux_image: musllinux_1_1
          - os: ubuntu-latest
            python: 310
            bitness: 64
            platform_id: musllinux_x86_64
            manylinux_image: musllinux_1_1
          
          # MacOS x86_64
          - os: macos-latest
            bitness: 64
            python: 38
            platform_id: macosx_x86_64
          - os: macos-latest
            bitness: 64
            python: 39
            platform_id: macosx_x86_64
          - os: macos-latest
            bitness: 64
            python: 310
            platform_id: macosx_x86_64

          # MacOS arm64
          - os: macos-latest
            bitness: 64
            python: 38
            platform_id: macosx_arm64
          - os: macos-latest
            bitness: 64
            python: 39
            platform_id: macosx_arm64
          - os: macos-latest
            bitness: 64
            python: 310
            platform_id: macosx_arm64

    steps:
      - name: Checkout libinjection-python
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # update once build dependencies are available
      
      - name: Install cibuildwheel
        run: >-
          python -m
          pip install
          cibuildwheel
      
      - name: Build and test wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_COMMAND: "echo Wheel installed"
          #CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          CIBW_BUILD_VERBOSITY: 1

        run: python -m cibuildwheel --output-dir wheelhouse
    
      - name: Publish wheels to GitHub artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl


      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout libinjection-python
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # update once build dependencies are available

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      
      - name: Build a source tarball
        run: >-
          python -m
          build
          --sdist
          --outdir dist/
        
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
